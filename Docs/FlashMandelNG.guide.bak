@Database FlashMandelNG.guide
@Author "Dino Papararo and Edgar Schwan"
@(c) "Copyright (c) 1995-2022 Dino Papararo / Edgar Schwan"
@$VER: FlashMandelNG.guide 4.3 (27/Feb/2022)
@font courier.font 18
@wordwrap

@node Main "FlashMandelNG Guide"

@{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} 4.3 © 1995-2022 by Dino Papararo and Edgar Schwan

A new program for @{"Mandelbrot's set" link Mandelbrot}.

    @{"Installation" link Install}  How to install
    @{"Requirements" link Required}  Minimun requirements
    @{"YAFG        " link YAFG}  @{fg highlight}Yet Another Fractal Generator@{fg text}
    @{"Interface   " link Interfc}  Program's interface
    @{"Features    " link Caratte}  Major features
    @{"ARexx       " link "docs/FM_ARexx.guide/Main"}  How to use FlashMandel-arexx
    @{"History     " link History}  History
    @{"Future      " link Futuro}  To do...
    @{"Authors     " link Autore}  Yes we are...
    @{"Greetings   " link Ringra}  ... Hi friends!
    @{"Copyright   " link CopyRg}  Necessary informations


@{b}NEW:@{ub}
First version of FlashmandelNG was born thanks to Edgar and his AmigaOne x1000.
It was based on original Flashmandel for OS3/WOS (you can find these old version on Aminet), but now it's fully addressed for OS4 and GCC compiler.
FlashMandelNG so was firstly developed on Edgar's AmigaOne X1000 and later on my QEMU/WinUAE PPC and OS4.
After about 20 years I (Dino) own again a real Amiga platform, exactly a Pegasos II :-)
So due this change I come back to improve and bugfix FlashMandelNG on a real hardware with renewed force, cleaning all the code and hopefully bugfixing atmost all bugs!
FlashmandelNG during last months was developed under AmigaOS 4.1fe with latest sdk and adtools.
The choosen compiler was GCC 8.4.0 but main routines are all written in handmade assembly or in C, using altivec directives (for altivec version).

The most recent version of FlashMandelNG can be found here:
* OS4-Depot:           @{u}@{fg fill}http://os4depot.net/?function=showfile&file=graphics/misc/flashmandelng.lha @{fg text}@{uu}
* Aminet:              @{u}@{fg fill}http://aminet.net/package/gfx/fract/FlashMandelNG_OS4.lha @{fg text}@{uu}

Instead this is yhe website of an old version compatible with mc68k and AmigaOS 2.x/3.x
* FlashMandel-Support: @{u}@{fg fill}http://www.schwan-clan.de/amiga/FlashMandel_GB.shtml@{fg text}@{uu}

@endnode

@node Install "Installation"

Program don't need to be installed anymore and all previous references to "FLASHMANDEL:" assing has been substituted with "PROGDIR:".
So keep the FlashMadnelNG drawer and put it where you want, to play the program just click 'n run its icon!
You can personalize some startup settings via existing TOOLTYPES.
To call the guide inside the program it's a must to have the Multiview command into the "SYS:Utilities/" path, otherwise the guide will not be showed.

@next Required

@endnode

@node Mandelbrot "Mandelbrot's informations"

@prev Mandelbrot

Benoit Mandelbrot is the fractal's inventor. In year 1975 he coined this word to refer to auto-similar and fragmented forms, characteristics common to all fractals.
@{fg highlight}Mandelbrot's set@{fg text} is a fractal generated by mathematic formula @{fg fill}Z = Z² + C@{fg text}. There can be also others fractal's set with same proprieties of @{fg highlight}Mandelbrot's set@{fg text} and derived from this, one of these is the fractal rendered by this math formula @{fg fill}Z = (Z²)² + C@{fg text}.
These functions are iterated many times into complex plane (you get a complex number initially equal to zero, square it and add a costant, then you restart procedure); "@{i}many times@{ui}" correspond to the "@{i}Iterations@{ui}" parameter that you can set in many fractal's programs.
The result of this iteration can converge to a number or go to infinite. In the case that it goes to infinite, we assign a corresponding color to the speed of the divergence in the complex plane.
This is the @{"Mandelbrot's puppet" link Mandelbrot_def.iff/main} derived from the original Mandelbrot formula @{fg fill}Z = Z² + C@{fg text}.

@next Mandelbrot

@endnode

@node Required "System's requirements"

@prev Install

@{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} does not need a lot of resources.

@{u}FlashMandelNG:@{uu}

- Any Amigalike system compatible with OS 4
- For AREXX you need to install AWNP from Aminet - http://os4.aminet.net/package/dev/misc/AWNP_2-54

Anyway I suggest a very fast cpu and a good 24" (or bigger) monitor to well appreciate generated pictures.

@endnode

@node YAFG "Yet Another Fractal Generator"

@{b}@{i}@{fg highlight}@{bg text}Why another fractal's generator ?@{bg back}@{fg text}@{ui}@{ub}
First of all for a challenge against myself to reach more speed release after release but aldo for my fun programming it at low level, first in mc68k and later in powerpc assembly.
I had fun even for using Altivec instructions/directives, I like much to experiment with it!
But also because it produces really cool pictures with a paticular tecnique and does not exists something like it which is @{b}full based@{ub} on @{b}Amiga OS@{ub} and doesn't make dirty tricks, to gain more speed.
For the features read the node @{"Features" link Caratte}.
@endnode

@node Interfc "Program's interface"

@{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} is system friendly, and respects the @{b}@{fg highlight}Style Guide@{fg text}@{ub}, so all gadgets, menus and requesters are easy.

These are the supported @{b}ToolTypes@{ub}:


@{b}@{fg highlight}SMREQUESTER@{fg text}@{ub}: Set this to "1" to show initial SceenMode Requester or 0 to use tooltypes parameters (default=1).
@{b}@{fg highlight}SCREENWIDTH@{fg text}@{ub}: Initial screen's width between 800 and 16368 pixel (default=1280).
@{b}@{fg highlight}SCREENHEIGHT@{fg text}@{ub}: Initial screen's height between 600 and 16384 pixel (default=720).
@{b}@{fg highlight}SCREENDEPTH@{fg text}@{ub}: Initial screen's depth forced to 8 bitplanes for 256 colors or 24 bitplanes for 16777216 colors (default=8).
@{b}@{fg highlight}SCREENMODE@{fg text}@{ub}: Initial hexadecimal display mode RTG, a screen mode requester will be presented at startup.
@{b}@{fg highlight}TURBORENDER@{fg text}@{ub}: Set this to 1 to maximize speed and render pictures directly in memory and draw on screen in onepass at end (default=0).
@{b}@{fg highlight}HISTOGRAMRENDER@{fg text}@{ub}: Set this to 1 to use Histogram coloring algorithm to fully use current palette. Only for 8 bit screens (default=0).
@{b}@{fg highlight}POWER@{fg text}@{ub}: Set the power of Mandelbrot and Julia sets for Z=Z^n+C formula, where 2<n<11 (default=2).
@{b}@{fg highlight}REALMIN@{fg text}@{ub}: Initial left real limit between -8 and +8 (default=-2.5).
@{b}@{fg highlight}REALMAX@{fg text}@{ub}: Initial right real limit between -8 and +8 (default=+1.5).
@{b}@{fg highlight}IMAGMIN@{fg text}@{ub}: Initial bottom imaginary limit between -8 and +8 (default=-1.125).
@{b}@{fg highlight}IMAGMAX@{fg text}@{ub}: Initial top imaginary limit between -8 and +8 (default=+1.125).
@{b}@{fg highlight}FONTNAME@{fg text}@{ub}: Initial screen font (default=courier.font).
@{b}@{fg highlight}FONTSIZE@{fg text}@{ub}: Initial font size (default=18).
@{b}@{fg highlight}STARTPRI@{fg text}@{ub}: Initial program priority (default=-3).
@{b}@{fg highlight}STARTWITHJULIA@{fg text}@{ub}: Initial formula '0' for Mandelbrot and '1' for Julia (default=0).
@{b}@{fg highlight}ITERATIONS@{fg text}@{ub}: Initial max iterations (default=320).
@{b}@{fg highlight}JULIACONSTREAL@{fg text}@{ub}: Initial Julia real constant (default=-0.72).
@{b}@{fg highlight}JULIACONSTIMAG@{fg text}@{ub}: Initial Julia imaginary constant (default=-0.26).
@{b}@{fg highlight}COLORSREMAP@{fg text}@{ub}: Linear=0, Log(x)=1, Repeated=2, Sqrt(x)=3, x²-x=4, Sqrt(x³)=5, Atan(sqrt(x²))=6, GUI=7, (default=0).
@{b}@{fg highlight}USERNAME@{fg text}@{ub}: Write your name here and you'll be the author of all your saved pictures and palettes (default=Amiga Rules) ;-).
@{b}@{fg highlight}REXXCMDx@{fg text}@{ub}: Path of an arexx-script you want to add into the arexx-quickmenu, where x is a continuous number starting with 1.
@{b}@{fg highlight}MATHMODE@{fg text}@{ub}: Here you can select the precision of calculation. '1' stands for normal in hardware, fast calculations, '2' for very high-precision software, slow calculations.
@{b}@{fg highlight}PRECISIONBITS@{fg text}@{ub}: Here you can set the number of precision bits for high-precision-calculation (32 - 4096) (default=128).
@{b}@{fg highlight}PLAYSOUND@{fg text}@{ub}: Set this to "0" to avoid applause sound at end first rendering (default=0).


At the start, if you haven't modified ToolTypes, @{"Mandelbrot's set" link Pictures/Mandelbrot_def.iff/main} is rendered between @{b}(-2.5,1.125i)@{ub} and @{b}(+1.5,-1.125i)@{ub} limits, with a 1280 x 720 screen at 256 colors.
At the end of the rendering, an instant with a fast PPC processor or UAE/QEMU with a modern cpu, the about requester will be displayed showing the version of the program and the Giftware condition status.
Hitting the "More" gadget will be shown the workgroup too.
To continue choose the "Ok" gadget.

On the screen's title bar there are the following parameters:

@{b}@{fg highlight}Real@{fg text}@{ub} current coord for real axis.
@{b}@{fg highlight}Imag@{fg text}@{ub} current coord for imag axis.
These two parameters will continually change moving the mouse pointer.

@{b}@{fg highlight}W:H@{fg text}@{ub} is the ratio between screen's dimensions.
@{b}@{fg highlight}R:I@{fg text}@{ub} is the ratio between fractal's dimensions.
For a real representation these two parameters @{b}MUST@{ub} be equal !
If not, is @{b}NECESSARY@{ub} to open the @{b}@{fg highlight}Coordinates Requester@{fg text}@{ub} ShortCut @{b}@{fg highlight}Amiga C@{fg text}@{ub} and select the @{b}@{fg highlight}Ratio@{fg text}@{ub} button, then recalculate the picture with the new values.

@{b}@{fg highlight}Mx My@{fg text}@{ub} are the mouse coordinates on the screen.
@{b}@{fg highlight}W H@{fg text}@{ub} are the screen width and height dimensions.

There are five menus, with shortcuts obviously:

    @{" Project " link Project}
    @{" Options " link Options}
    @{"Calculate" link Calculate}
    @{"  Video  " link Video}
    @{"  ARexx  " link ARexxMenu}

Holding down the left mouse button over fractal's picture, will appear a rectangle corresponding to the new coords for a Zoom or Preview.
You can enlarge zoom area using mouse wheel for optimal granularity conrol or moving mouse letting pressed left mouse button.
Once selected a zone you can fast zoom inside picture pressing Middle Mouse Button or choose Zoom in calculate menu, ShortCut @{b}@{fg highlight}Amiga Z@{fg text}@{ub}.
Meantime rendering, with the @{b}@{fg highlight}Tab@{fg text}@{ub} key you can jump @{"current rectangle" link CProb}; hitting the @{b}@{fg highlight}Esc@{fg text}@{ub} key or using the @{b}@{fg highlight}Stop@{fg text}@{ub} ShortCut @{b}@{fg highlight}Amiga X@{fg text}@{ub}, you'll stop the rendering.

@next Caratte

@endnode

@node Project "Menu Project"

@prev Interfc

There are nine choices, @{b}About@{ub}, @{b}Load Picture@{ub}, @{b}Save Picture@{ub}, @{b}Load Palette@{ub}, @{b}Save Palette@{ub}, @{b}Print@{ub} e @{b}Quit@{ub}.

@{b}About@{ub} it's the same requester which appears at the start, it gives you infos about the @{"Authors" link Autore} and his workgroup.
Shortcut: @{b}Amiga A@{ub}

@{b}System info@{ub} shows a requester about PowerPC cpu and free memory.
Shortcut: @{b}Amiga N@{ub}

@{b}Help@{ub} shows the guide of FlashMandelNG in asyncronous way, so you can continue with renderings, but remember you must have Multiview into the default path SYS:Utilities/Multiview. The guide is also supported hitting the 'HELP' key but only into the main window.
Shortcut: @{b}Amiga H@{ub}

@{b}Load Picture@{ub} loads a previously saved IFF picture, setting parameters automatically like those at the save time.
Shortcut: @{b}Amiga L@{ub}

@{b}Save Picture@{ub} saves current picture in IFF format, with a special @{b}Chunk@{ub} where to store fractal's coords and other parameters (iterations, mapping, etc...). The file obtained can be viewed by any program able to read IFF ILBM files. Be careful to not overwrite an existing file, but there is a verify function to inform you.
Shortcut: @{b}Amiga S@{ub}

@{b}Load Palette@{ub} loads an IFF palette file. In 24bit screens this item is ghosted because color palette isn't used.
Shortcut: @{b}Amiga Y@{ub}

@{b}Save Palette@{ub} saves current palette in IFF format, the file obtained could be useful for any other graphic application. In 24bit screens this item is ghosted because color palette isn't used.
Shortcut: @{b}Amiga E@{ub}

@{b}Print@{ub} performs a @{i}hard copy@{ui} of the screen, it will print screen just like it is (settings are based on system preferences), the title bar, if it's present, is not printed.
Shortcut: @{b}Amiga D@{ub}

@{b}Quit@{ub} exits the program and frees all resources allocated.
Shortcut: @{b}Amiga Q@{ub}

@endnode

@node Options "Menu Options"

There are nine choices:
@{b}Title@{ub}, @{b}Limits@{ub}, @{b}Iterations@{ub}, @{b}Priority@{ub}, @{b}Power@{ub}, @{b}Color mapping@{ub}, @{b}Fractal type@{ub}, @{b}Rendering-Mode@{ub}, @{b}Math-Mode@{ub}.

@{b}Title@{ub} is a submenu which has a @{"boolean flag" link BoolFlag} that means if to show or not the title bar (Shortcut: @{b}Amiga O@{ub}); if the title bar is ghosted, you can zoom even in the higher part of the screen, but holding down the right mouse button the menu will always be there.
This submenu has the @{b}Last time@{ub} (Shortcut: @{b}Amiga T@{ub}) submenu choice, which shows on the title bar the last rendering elapsed time and the average speed in Pixels per Seconds, obviously if during rendering you stop it, time and speed will be wrong because only a part of fractal has been rendered.
Please notice that in FlashMandelNG the rendering speed is not proportional to the screen dimensions, due to its rendering method, the so-called 'Divide et Impera'.
With other programs, starting to rendering in an 800x600 screen needs four times than one in 400x300 (480.000 Vs 120.000 pixels), instead with @{b}FlashMandelNG@{ub} you'll have to wait about the same time.

@{b}Limits@{ub} shows a window with some numeric gadgets and permits to insert by hand new values for complex coordinates and the Julia constant.
Four @{"Button Gadget" link ButtGad} @{b}Accept, Ratio, Reset, Cancel@{ub} are left to accept and apply changes, adjust coord's aspect ratio to the screen dimensions, to come back to the original values and to close the window without any change.
The Other button, instead, holds only one of two axis dimensions for a successful ratio adjustment; default is fractal's real X axis.
Shortcut: @{b}Amiga C@{ub}

@{b}Iterations@{ub} is a submenu where to set @{"iterations" link Mandelbrot}, between 8 preset values or a numeric requester. You are warned about best iterations number @{b}MUST@{ub} be greater than screen's colors otherwise you'll not be able to use the whole palette. Be warned high values for firsts zooms lead to bad results too, you must increase Iterations by little steps, zoom after zoom. This parameter interferes a lot with the final result and the rendering time !
Min iterations are equal to 64 and can grow up to max (2^30) -> 1073741823.
Shortcut: @{b}Amiga I@{ub} to store a not preset iteration number.

@{b}Priority@{ub} is a submenu for task priority. Choices are between -5 and +5 to not interfere with normal OS activity.
Shortcut: @{b}Amiga <n>@{ub} to set the priority at +<n>, where <n> is a numeric value between 0 and 5.
          @{b}Amiga Shift <n>@{ub} to set the priority at -<n>, where <n> is a numeric value between 0 and 5.

@{b}Power@{ub} is a submenu to set the exponent n of the formula Z = (Z^n) + C  with  2<n<11. Setting n to the default value 2 you get the classic Mandelbrot and Julia fractals.

@{b}Colors remap@{ub} colors are assigned in function of iterations for every point. FlashMandelNG has 8 different ways to assign a color to a point.
@{b}Linear@{ub} colors are remapped following the graph of y=x function.
@{b}Log(x)@{ub} colors are remapped following the graph of y=Log(x) function.
@{b}Repeated@{ub} colors are remapped following the graph of y=x function and repeated from start when last color is reached.
@{b}Sqrt(x)@{ub} colors are remapped following the graph of y=Sqrt(x) function.
@{b}x²@{ub} colors are remapped following the graph of y=x² function.
@{b}Sqrt(x³)@{ub} colors are remapped following the graph of y=Sqrt(x³) function.
@{b}Sqrt(Log(x²))@{ub} colors are remapped following the graph of y=Sqrt(Log(x²)) function.
@{b}GUI@{ub} as special case colors are remapped in a repeated way using 4 reserved GUI pen colors, by default you have a 4 color greyscale pictures. Note that loading color palettes does not change GUI colors, you can modify them in first upper left positions into Palette requester window.
Shortcut: @{b}Amiga <n>@{ub} to choose between the first 4 way of fractal color mapping.
          @{b}Amiga Shift <n>@{ub} to choose between the last 4 way of fractal color mapping.


@{b}Fractal type@{ub} is a submenu to set the @{"rendering formula" link Formula}.

    @{b}Julia@{ub}  To select the Julia rendering formula.
    Shortcut: @{b}Amiga J@{ub}

    @{b}Mandelbrot@{ub}  To select the mandelbrot rendering formula.
    Shortcut: @{b}Amiga M@{ub}
    
@{b}Rendering-Mode@{ub} is a submenu, where you can turn the turbo-mode on or off.

    @{b}Turbo:@{ub}  if this item is selected the speed will be maximun, but the display will be updated only at end of calculations. Meanwhile memory rendering "Turbo mode" is going on you will can't stop rendering.
    Shortcut: @{b}Amiga +@{ub}

   @{b}Histogram:@{ub}  Use this option if you are in "Turbo" mode and 8 bit screens (256 colors), and want to use as much as possible palette colors. You are warned about high time needed to render, especially on low end systems, due complexity algorithm heavily based on memory speed. On 24bit screens this option is deactivated.
    Shortcut: @{b}Amiga G@{ub}

   @{b}Math-Mode@{ub} is a submenu, where you can specify the precision bits of calculations.
    This option is useful to get higher precision in deeper iterations, when you note artifacts during rendering means you need to raise up precision bits.

    For calculating with high precision you need really high CPU-power, even a PPC-G4 at 800Mhz needs for a mandelbrot's set in 640x480 / 128 precison bits about 5 minutes!
    Because of this, use this feature only when needed and hardware math reaches his limits.

    @{u}Important:@{uu} In "Turbo mode" you cannot interrupt the rendering pressing "ESC" key or selecting "Stop" in menu!

    @{b}Fast:@{ub}  To select the normal, fast math-mode.

    @{b}High precision (xx bits):@{ub}  To select the slow high-precision-mode from 32 up to 4096 bits.

    @{b}Change precision...:@{ub}  Here you can set the number of bits in high-precision-mode.

@endnode

@node Calculate "Menu Calculate"

There are five choices: @{b}Preview@{ub}, @{b}ReCalculate@{ub}, @{b}UnDo@{ub}, @{b}Zoom@{ub}, @{b}Stop@{ub}.

@{b}Preview@{ub} opens a window four times smaller than screen for a faster rendering.
Shortcut: @{b}Amiga W@{ub}

@{b}ReCalculate@{ub} rewrites fractal with a new set of parameters.
Shortcut: @{b}Amiga R@{ub}

@{b}UnDo@{ub} comes back to the previous coords.
Shortcut: @{b}Amiga U@{ub}

@{b}Zoom@{ub} renders fractal within the new rectangle coords.
Shortcut: @{b}Amiga Z@{ub}

@{b}Stop@{ub} stops rendering.
Shortcut: @{b}Amiga X@{ub}, same result holding down ESC key.

@endnode

@node Video "Menu Video"

There are four choices: @{b}Cycle@{ub}, @{b}Palette@{ub}, @{b}Screen mode@{ub}, @{b}Font settings@{ub}.

@{b}Cycle@{ub} is a submenu with three options:

  @{b}Forward@{ub}  starts the @{"color cycling" link ColCyc} forward (Shortcut: @{b}Amiga >@{ub}).

  @{b}Backward@{ub} starts the @{"color cycling" link ColCyc} backward (Shortcut: @{b}Amiga <@{ub}).

  @{b}Delay@{ub}    sets delay between color cycling (0..100) (Shortcut: @{b}Amiga -@{ub}).


@{b}Palette@{ub} opens the @{"Palette requester" link PalReq} to manage colors. Pressing "#" the palette will be written on console in Hexadecimal 24 bit format. This item will be ghosted in 24bit mode because color palette isn't used.

@{b}Screen mode@{ub} to select new screen resolutions and let you choose the best mode. Only 8/24 bit screens are allowed. 

@{b}Font settings@{ub} to change screen charracters, useful for higher resolutions. Gui will change automatically with new fonts. Maximun font size is 24 pixel and are supported proportional fonts.

@next Interfc

@endnode

@node ARexxMenu "Menu ARexx"

@{b}ARexx-quickmenu@{ub} The first menu items are user-defined by tooltypes. Here you can add some arexx-scripts for quick access.
                The defintition for the first item is: AREXXCMD1="... .rexx"
                For the next items simply increase the number: AREXXCMD2=... , AREXXCMD3=... etc.

@{b}Launch...@{ub}       Opens an asl-requester, where you can choose an arexx-script for launching.

To learn more about the arexx-features look into the @{"ARexx-Guide" link "docs/FM_ARexx.guide/Main"}.

@endnode

@node BoolFlag "Boolean Flag"

@prev BoolFlag

A boolean flag has two states, True/False, On/Off, Zero/One... in this case shows or not the screen title.
@next BoolFlag

@endnode

@node ButtGad "Button Gadget"

@prev ButtGad

A @{b}Button Gadget@{ub} is a Gadget (Interface Selectable Element) which can be pressed to execute a function.
(@{fg fill}I didn't belive there were people who don't know it...@{fg text})

@next ButtGad

@endnode

@node PalReq "Palette Requester"

@prev PalReq

@{b}Palette Requester@{ub} is a window where to modify, copy, swap, spread, invert and rotate the colors.

This window has many gadgets. The first on the left is a rectangle with all modifiable colors, selecting one you can modify every cromatic component. Colors are ordered from left to right and from top to down; first color is in the top-left corner, last instead is in the bottom-right corner. First 4 colors should be unchanged, because are used for the interface look, however you can change them as you wish, but pay attention... you are warned!
@{b}Copy@{ub} gadget copies the selected color into another. Select color to copy and press the @{b}Copy@{ub} gadget, than select destination position.
@{b}Swap@{ub} gadget swap two colors into the palette.
@{b}Spread@{ub} gadget merge colors between current color and next selected with a very soft effect.
@{b}Invert@{ub} gadget invert the palette from top to down. Is useful to test high palette's pens without zooming far into picture and to import palettes from other Mandelbrot's programs. @{b}FlashMandelNG@{ub} for speed reasons uses colors in a different way from other programs, the pen 255 is the first to be used, the pen 254 the second and so on...
@{b}<<@{ub} gadget rotate by one in one position the whole palette from right to left.
@{b}>>@{ub} gadget rotate by one to one position the whole palette from left to right.
@{b}UnDo@{ub} gadget abort olny last operation.
@{b}#@{ub} the palette will be written on console in Hexadecimal 24 bit format.

The three scroller gadgets modify the three colors components red (R), green (G) and blue (B) of selected pen.
I suggest you to modify the single color's components with the keys @{b}'e'-'t'@{ub} for red, @{b}'f'-'h'@{ub} for green, @{b}'v'-'n'@{ub} for blue. The keys are @{b}'case sensitive'@{ub} and if used with @{b}shift/caps lock@{ub} you will add/sub @{b}10@{ub} units per time.

The three gadgets @{b}Accept@{ub}, @{b}Reset@{ub} and @{b}Cancel@{ub} downwards can accept the new changes, reset to original colors and reject any change.

@next PalReq

@endnode

@node ColCyc "Color Cycling"

@prev ColCyc

The @{i}Color Cycling@{ui} is a special function to animate the picture, moving palette color sequence.
In a @{"Color Bar" link Bar.brush/main} with a sequence of colors, if we copy the first in the second and so on, we'll have an animation effect.
The @{"Mandelbrot's set" link Mandelbrot} generated has next related property: for all near functions divergences are set same colors, therefore the palette rotation, in this case, generate a special effect.

@next ColCyc

@endnode

@node Formula "Rendering formula"

@prev Formula

There are two types of @{b}rendering formula@{ub}.

The @{b}Julia Set@{ub} is graphed by calculating the complex coordinate of each pixel Z, and by squaring that number and adding a second constant complex number C each iteration. if that number never goes to infinity, then that number is in the set, and the pixel is colored with the black color. If not, the corresponding to the number of iterations it took to determine that number is going to infinity is plotted. There are an infinite number of Julia Sets, as the constant C can be any complex number.

The @{b}Mandelbrot Set@{ub}, modeled after the Julia Set, uses the same basic process for each pixel, starting with Z equal to zero instead of starting out with the pixel's complex number value, and adding the pixel's number value C each iteration after squaring what you've got (Z) instead of adding a constant. Just as with the Julia Set, you can create different fractal by using different C values, in the Mandelbrot Set, you can use different starting Z value. You can also you compute Z to a power other than 2 before adding C. Z³+C is a cubic Mandelbrot, etc..

@next Formula

@endnode

@node Caratte "Program features"

@prev Interfc

FlashMandelNG is system friendly, with full respect of AmigaOS and Multitasking, uses only standard library functions.

Latest version of FlashMandelNG is developed and tested on an Pegasos II G4/1000Mhz with a Radeon 9250, previously It was developed and tested onlt under WinUAE/QEMU virtual machines.
The program is coded with the efficiency in mind, so I assure you about the best use of every register of PowerPC processors and every memory cell allocated by FlashMandelNG.
Rendering is speeded up with a direct access of ALL variables keeping ALL them into the FPU registers of PowerPC processors, so don't worry about your math libraries versions but be sure to got a working and fast FPU ;-)
In version 2.5 Version FlashMandelNG goes to GMP, so now all calculations are done using multiprecision GMP Library.
Obviously by default you start in hardware math mode due speed issues, but you can switch to multiprecision math once hardware registers reach their limits.

Uses the @{"Divide et Impera" link CProb} recursively method to gain time for @{"Mandelbrot's set" link Mandelbrot} rendering.

Uses ToolTypes to be extremely configurable and flexible directly on the first use.

Supports for every RTG 8 bit graphic display able to provide an entry in the Video Mode Database...

You can choose from two different fractal types the Mandelbrot and Julia Sets with 11 different exponents between 2 and 2048.

You can Render a picture, save it and reload it later, continuing zooming into it without loose your work.

On OS3.x FlashMandel used the new elegant and simple Reaction user interface.
Sadly in the OS4-version we have only the system Gadtools user interface, all GUI stuff was created with "Reactor" program and object file generated it's still not compatible with PowerPC!

FlashMandelNG is localized in most widely spread languages.

You can print your pictures on any supported Workbech printer.

Sources are spreaded to learn as example and to improve/continue developing program by third parties, to compile your own version just open a shell and type MAKE!

It's really fast and respecting the ratio between the complex plane and the screen dimensions showing you non distorted images of MandelBrot and Julia fractal sets!

FlashMandelNG archive has precalculated pictures to start your explorations, you can choose also between many predefined funny palettes but you can extend them with new creations.


@endnode

@node Futuro "FlashMandelNG Future"

I'd like to add at least the following features but I'm not sure I'll do that... it depends a lot from my free time and your feedbacks:

@{b}1)@{ub} Add @{fg highlight}Fix/improve Arexx benchmarks@{fg text}.
@{b}2)@{ub} Build an @{fg highlight}AmigaOne Tabor A1222 optimized SPE version@{fg text}.

Please send @{"us" link Autore} any comment, suggest, bug, by snail mail or E-Mail: @{fg highlight}dino.papararo@gmail.com@{fg text}.

@next History

@endnode

@node History "FlashMandelNG History"

@prev Futuro

Hystory;
@{b}@{fg highlight}FlashMandelNG 4.3 *** 2 Mar 2022 @{fg text}@{ub}
New in 4.3 Maxed recursion algorithm up to 4x4 pixel blocks. 
Added new ToolType SMREQUESTER, set this to 0 to use ToolTypes parameters or 1 to choose resolution from Screenmode requester's list at startup. (Default = 1)
Added new ToolType PLAYSOUND, set this to 0 to avoid applause sound at end first rendering. (Default = 0)
Fixed mem allocation bug for orbit window. 
Linked against LibGMP 6.2.1 Many other small internal changes, cleanups, small fixes/optimizations.

@{b}@{fg highlight}FlashMandelNG 4.2 *** 05 Feb 2022 @{fg text}@{ub}
New in 4.2 Fixed Turbo Mode (rendering in memory) in 8 bit screens. Fixed bitmap scaling effect for zooms. Implemented use of Screen's Custom Bitmaps and made some other internal changes. OS4 API calls are used vs standard C functions whenever possible.

@{b}@{fg highlight}FlashMandelNG 4.1 *** 29 Jan 2022 @{fg text}@{ub}
New in 4.1 Fixes and under the hood improvements.  Now a real "fading effect" is present also in 24bit screenmodes. 

@{b}@{fg highlight}FlashMandelNG 4.0 *** 09 Jan 2022 @{fg text}@{ub}
New in 4.0 Fixed ARexx functions and scripts. Fixed Load Palette function. 
Where possible OS4 API calls are replaced over C library standard functions.
Altivec binary doesn't crashes more on systems without an altivec unit and exits with a warning. 
In Altivec binary ARexx port is disabled and Altivec "Java/IEEE" mode is turned off because useless for our purposes, it was only an experiment.
Reindented, bugfixed and cleaned up code. Recompiled project against current SDK V53.34 released for AmigaOS4.

@{b}@{fg highlight}FlashMandelNG 3.9 *** 04 Dic 2021 @{fg text}@{ub}
Bugfixed "Recalculation" and "Undo" functions, optimized Altivec code and enabled Java/IEEE mode. 
Now Fading effect is present also in 24bit pictures.
Made other small fixes, enanchements and cleanups.
Raised default iterations from 320 to 4096, speed is only partially affected :-)

@{b}@{fg highlight}FlashMandelNG 3.8 *** 28 Nov 2021 @{fg text}@{ub}
Enabled Mouse Wheel "Zoom in" frame for a better granularity control.
Now you can press ESC key to exit when you have to choose Julia fractal type.

@{b}@{fg highlight}FlashMandelNG 3.7 *** 14 Nov 2021 @{fg text}@{ub}
Enabled  Middle  Mouse  Button to Zoom in the specified area. Better
handling of GT_GetIMsg and GT_ReplyIMsg intuition routines.

@{b}@{fg highlight}FlashMandelNG 3.6 *** 24 May 2021 @{fg text}@{ub}
Enabled screen rendering in 24bit screenmode.
Cleanup code and small optimizations.

@{b}@{fg highlight}FlashMandelNG 3.5 *** 07 May 2021 @{fg text}@{ub}
It's a bugfix release, now FlashMandel workbench startup and palette requester are fixed.

@{b}@{fg highlight}FlashMandelNG 3.4 *** 1 May 2021 @{fg text}@{ub}
Now load/save picture functions uses datatypes.library, an additional file with same picture name followed by ".fmng" extension is created to save and reload coordinates. Load picture is still compatible with previous images. 

@{b}@{fg highlight}FlashMandelNG 3.3 *** 28 Mar 2021 @{fg text}@{ub}
Implemented 24bit load/save pictures, greetings to Massimiliano Scarano for his support.
Some internal fixes and code cleanup.

@{b}@{fg highlight}FlashMandelNG 3.2 *** 27 Feb 2021 @{fg text}@{ub}
Implemented 24 bit screens  support  for  truecolor  fractals.  
Fixed Histogram  coloring algorithm. 
Fixed and speeded up recursive drawing functions.
Minor code fixes and code clean up, now text indentation follows GNU rules to 80 colums margin.
NB: To save 24 bit pictures you have to switch to 256 colors screen  due to a bug in iff ilbm 24bit save function.

@{b}@{fg highlight}FlashMandelNG 3.1 *** 18 Jan 2021 @{fg text}@{ub}
Implemented Histogram coloring algorithm as currently decribed on wikipedia, now you can display a wider range of colors at same time.
Recoded a lot of stuff following the current best "C Programming practices", i.e. no more use of global vars fo inner functions.
Fixed still some serious bugs, this update is a "must have".

@{b}@{fg highlight}FlashMandelNG 3.0 *** 06 Jan 2021 @{fg text}@{ub}
It's a major release so most changes are under the wood.
Finally Reaction GUI is fully reimplemented, Edgar Schwan did really a superb work about this!  
I reworked also color remapping to gave some nice alternative to test, i.e. try GUI remapping. 
A lot of bugs were fixed, some of them really dirty, I have also cleanup most code and gained another small speedup!

@{b}@{fg highlight}FlashMandelNG 2.9 *** 23 Jul 2020 @{fg text}@{ub}
Now Altivec C routines uses full intrinsics, generated  code  should be very mear to full handmade asm.
Small bugfixes and code cleanup.

@{b}@{fg highlight}FlashMandelNG 2.8 *** 14 May 2020 @{fg text}@{ub}
These are last days of COVID-19 quarantine in Italy, next week I'll come back to my daily work, ..so I decided to try to unlock once for all full potential of Altivec vector unit and... I did it! :-)
Now FlashMandelNG processes 4 pixels per time in the altivec version and it's nearly realtime for zooms with low/mid iterations.
One of the most important issues was how to control Altivec power without loosing speed. So I took a challenge vs myself and I won it! The my Altivec algorithm is fastest ever seen, preserving full power and using a smart and efficient control for results! :-)
Have fun!

@{b}@{fg highlight}FlashMandelNG 2.7@{fg text}@{ub}

Few days and I'll come back to my daily work, so much less time to program and have fun with Amiga :-(
In this version I have double checked all critical source code and looked at every single instruction to gain max speed, I really think to have reached max possible performances on G4 PowerPC hardware.
Only the Altivec part can be still optimized calculating four pixels per loop instead than just one, sadly until now all logic involved to control each pixel, speeds down all calcs! ..so I have to think for a better solution.
In this version only RTG screens are allowed.
Now you can run unlimited instances of FlashMandel processes. (depends from memory)
Recompiled with GCC 8.4.0 and latest adtools with new compiler speed options.
Various fixes and improvements.

@{b}@{fg highlight}FlashMandelNG 2.6@{fg text}@{ub}

We still are in Covid-19 quarantine, I'm still oing to be productive on coding..
Added periodicity check major speedup in black areas.
Fixed rendering of Z^n+C with (power) n=16 or more.
Fixed Load and Save with a workaround, now all iff pictures aren't more compressed.
Raised up GMP Library to actual latest version 6.2.0 (Edgar Schwan).
Raised up maximum number of iterations until to 2^31-1 -> 2147483647.
Cleaned binaries from all debug stuff.
Many other minor changes..

@{b}@{fg highlight}FlashMandelNG 2.5@{fg text}@{ub}

Due Covid-19 virus in few weeks I did what I used to do in years due my  lack  of time..
Finally I have implemented GMP Library numeric support. Now you can zoom into Mandelbrot and Julia sets until  4096  precision's  bits  are saturated.
Changed a bit the main recursion algorithm and now calculations are about 10% faster!
I discovered and fixed some other annoyng bugs,  at  this time  only  the  Arexx and Reaction code parts needs to be revisioned, all other code is revisioned/updated.
Iff chunk format of saved pictures is changed, so now you can't more load Pre v2.5 FlashMandel fractals and continue zooming inside.
Tested and working on my Pegasos II and on QEMU SAM460ex board, sadly under my WinUAE OS4 Classic it doesn't work more! I have to investigate..

@{b}@{fg highlight}FlashMandelNG 2.3@{fg text}@{ub}

From older releases a lot of code has changed and improved.
Ton of bugs were fixed and important speed improvements applied.
Now I can test it directly on my new Pegasos II and all is more simple and funny, no more WinUAE!! :-)

Very old versions history:

@{b}@{fg highlight}FlashMandelNG 1.1@{fg text}@{ub}

 The target for this special release of FlashMandel is AmigaOS 3.x with a 68K cpus with or without fpu coprocessors and AmigaOS4.x machines with a PPC cpu.

 Added realtime julia window preview.
 Added realtime escape orbit window visualization.
 Many speed improvementes, especially in turbo mode.

 Bugfixes
 
 Tons of bugs fixed and speed improvements.

@{b}@{fg highlight}FlashMandelNG 1.0@{fg text}@{ub}

 The new target for FlashMandel is AmigaOS4, so now we have a native version for this PPC-OS.
 The 68k will still be supported, but not the PPC under WarpOS.
 Please notice:
 Because of some changes in the API of the system-arexx-functions, there are some changes in the API of the FlashMandel-arexx-commands.
 This affects the 68k- and the OS4-version.
 Please refer to the @{"arexx-docs" link "docs/FM_ARexx.guide/Main"}.
 (Edgar Schwan)

 Bugfixes

@{b}@{fg highlight}FlashMandelMixed/68k 2.5@{fg text}@{ub}

 Added routines for high-precision-calculation. The number of digits can be selected between 10 and 1000 digits.
 (Edgar Schwan)

 Now there are two different projects. First the old WarpOS-version and second a new special 68k-version. The 68k-version
 should be installed on 68k-only systems. This version is the base for future versions ported to MorphOS an AmigaOS 4.0.
 (Dino Papararo)

 Added the orbit window to study escape points.

 Added a Julia preview window to choose even betterthe points of julia set.

 Major speed improvements especially in 'turbo' mode.

 Tons of bugs fixed, improved stability.

@{b}@{fg highlight}FlashMandelWOS 2.2@{fg text}@{ub}

 Added three new arexx-scripts:

   1. Benchmark_II.rexx:
      A new benchmark-script with new functions and a localized reaction-GUI (Needs AWN-Pipe).

   2. Create_FMandel_Anim.rexx:
      A script for creating an IFF-animation. With a localized reaction-GUI (Needs AWN-Pipe).

   3. Toolbar.rexx:
      Adds a toolbar to the FlashMandel-screen. Includes the most important functions (Needs AWN-Pipe).

 Some modifications are made to the reaction-windows. Now you can confirm a window by pressing "Return" and cancel a window by pressing "ESC".

 A polish catalog file is now included. Thank you Spider & TranceLetters. The file is still v1.5, sorry.

 Fixed some bugs in the arexx-code.


 * All changes are done by Edgar Schwan. Dino's Amiga is dead because of a defect CyberStormPPC :-(

@{b}@{fg highlight}FlashMandelWOS 2.1@{fg text}@{ub}

 Fixed a bug into the iterations requester, now the iterations can be accepted from 31 to 32767 ((2^15)-1) (Reported by Bonnie Dalznell).

 Fixed a bug into the System info requester, now the PPC is SHOULD be recognized by both MorphOS and AmigaOS 4.

@{b}@{fg highlight}FlashMandelWOS 2.0@{fg text}@{ub}

 Added an ARexx port. (Edgar Schwan)

 Created a new guide to explain all features of FlashMandelWOS ARexx port. (Edgar Schwan)

 Created some example Arexx scripts. (Edgar Schwan)

 Compiled a special no 68k fpu version for owners of Blizzard MC040LC/PPC603e, it runs also on other systems without an FPU.

@{b}@{fg highlight}FlashMandelWOS 1.6@{fg text}@{ub}

 Extended main formula from Z = Z² + C to Z = (Z^(2^n)) + C with 1 <= n <= 11.

 Added a new ToolType POWER to set start polynomial exponent, default set to 1.

 Changed default coords into (-2,+1.125i) (+1,-1.125i).

 Splitted archive in 2 parts, one for pictures pix/fract/FlashMandelPic.lha (downlodable form any Aminet mirror) and other for everithing else.

 Recompiled all with AmigaOS 3.9 developer archive, includes and libs.

 Made many different internal changes.

 Updated docs for new features added.

@{b}@{fg shine}FlashMandelWOS 1.5@{fg text}@{ub}

**************************************************************************************************************
**************************************************************************************************************
Without the hard work of Edgar Schwan this version of FlashMandel could never be released! Thanks a lot Edgar.
**************************************************************************************************************
**************************************************************************************************************

 Added support for Reaction GUI, now it's possible to use all features only by mouse.

 Added support for Localization for Italian and German languages, others are welcome ;-)

 Added an Installation script to install, upgrade or delete the program.

 Speeded up about 12% the renderings in PPC mode.

 Reworked the printer support code for a better output, now should be printed the whole A4 paper.

 Reworked the guide a bit.

 Now FlashMandel has an unofficial internet site http://rz-home.de/~eschwan/FlashMandel_GB.shtml by Edgar Schwan.

 Some minor internal changes and optimizations increasing compatibility with all future Amiga clones ;-)

 Now you need al least Kickstart 3.1 (V40) to run the program due the use of the WriteChunkyPixels ROM function.

@{b}@{fg highlight}FlashMandelPPC 1.2@{fg text}@{ub}

 Renderings in 68k mode are much faster, about 30% on my Mc68060 due a better use of data cache.

 PowerPC FPU datas now are 32 bit aligned speeding up a bit the rendering, bugfixed by Frank Mariak.

 FlashMandelWOS runs on MorphOS too, under WarpOS emulation ;-)

 Reducing screen depth caused wrong colors remap, fixed.

 Changed the default screenmode to the Picasso 800x600x256, tested with WinUAE Jit.

 Changed the coordinates record of iff pictures, you can't open older saved pictures :-((

 Added an information requester about processors recognized 68k & PowerPC and available memory.

 Extended the fade effect 'To Black/From Black' when a new picture or palette is loaded.

 Added an Italian guide too, by Giorgio Signori.

 Now you can choose between 8 different ways to remap colors.

 Optimized PPC code to a better memory access.

 Recompiled using Andreas Heumann's PPCMathMib increasing between 1,5 and 9 times the speed of all math functions.
 
 Added new docs and icons by Edgar Schwan.

 Refreshed FlashMandel's pictures archive.

 Made many internal code changes.

 Added new ToolTypes.

@{b}@{fg highlight}FlashMandelPPC 1.0@{fg text}@{ub}

 First public non beta version.

@next Ringra

@endnode

@node Autore "How reach the author"

@prev RBrandner

* @{b}Dino Papararo@{ub}

  Snail address if you have @{fg highlight}a lot of@{fg text} patience :-):

    Dino Papararo
    Via Manzoni 184
    80123 Napoli
    Italy

  EMail addresses:

    Dino.Papararo@GMail.Com
    
  HomePage:

    @{u}@{fg fill}http://www.dinopapararo.com@{fg text}@{uu}


* @{b}Edgar Schwan@{ub}

  Mail: eds@rz-online.de

  Homepage:

    @{u}@{fg fill}http://www.schwan-clan.de@{fg text}@{uu}



Official support site in English and German languages (Webmaster Edgar Schwan):

    @{u}@{fg fill}http://www.schwan-clan.de/amiga/FlashMandel_GB.shtml@{fg text}@{uu}

@next Ringra

@endnode

@node Ringra "FlashMandelNG workgroup"

@prev History

@{"Author" link Autore} greets these people to have helped him during the project development:

@{fg highlight}Elena Novaretti@{fg text} for her contibution with new ideas, critics and suggests to the developing of FlashMandelWOS and for her help into debug and beta testing.

@{fg highlight}Giorgio Signori@{fg text} for FlashMandelWOS GlowIcon, Italian docs, Beta testing.

Last but not least following people have contibuted with criticisms and hints to debug and improve costantly FlashMandel, FlashMandelPPC, FlashMadelWOS and now FlashMandelNG:

@{fg highlight}Vincenzo Iodice@{fg text},@{fg highlight}Guillaume Ubbelohde@{fg text},@{fg highlight}Jen Allen@{fg text},@{fg highlight}Illya Rudkyn@{fg text},@{fg highlight}Jarle Thorsen@{fg text},@{fg highlight}Francis Labrie@{fg text},@{fg highlight}Carol Meilicke@{fg text},@{fg highlight}Steffen Haeuser@{fg text},@{fg highlight}Staffan Lindberg@{fg text},@{fg highlight}Thomas Lorenz@{fg text},@{fg highlight}Andreas Steup@{fg text},@{fg highlight}Stu Casper@{fg text},@{fg highlight}Paula-Christiina Wirtanen@{fg text},@{fg highlight}Jon B. Peterson@{fg text},@{fg highlight}Ronald Teune@{fg text},@{fg highlight}Claudio Pucci@{fg text},@{fg highlight}Sergio Tassi@{fg text},@{fg highlight}Frank Mariak@{fg text},@{fg highlight}Fabrizio Bartoloni@{fg text},@{fg highlight}R-Tea@{fg text},@{fg highlight}Massimiliano Scarano@{fg text},@{fg highlight}Daniel Reimann@{fg text}.

TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX ! TNX !

@endnode

@node CopyRg "Copyright infos"

@{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} is GiftWare, send anything to the @{"Authors" link Autore}, if you like it.

USE @{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} AT YOUR OWN RISK, THERE IS NO WARRANTY OF FUNCTIONING. THE @{"AUTHORS" link Autore} DOES NOT ASSUME ANY RESPONSABILITY FOR ANY INCONVENIENCE.

The whole archive of @{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} or a part of it can't be used for money, anyway it is freely distributable in Public Domain, ShareWare or GiftWare software collections, on condition that they be under 30 US $ fee. OS4-Depot, Aminet, AmyResource, BitPlane, Amiga.It, AmigaMagazin and others newspapers are free to include this program in their CD collections in archived and unarchived way, but leaving the whole contents as the original one.

@next CopyRg

@endnode

@node Processori "Supported processors"

@prev Processori

Any PowerPC 603+ family processor is supported but FlashMandel is optimized for G4 code, with or without altivec unit.
FlashmandelNG is tested on Pegasos II with a G4/1000Mhz-CPU and SHOULD be compatible with all OS4 Real or Amigalike PowerPC machines.
Rendering routines are all optimized by hand in PowerPC Assembly code.

@next Processori

@endnode

@node ChipSet "I chipset supportati"

@prev ChipSet

Only OS4 "Originals" or Amigalikes computers (UAE/QEMU) with RTG graphics boards are supported.
Flashmandel uses 8/24 bit screens allowing renderings in 256/16777216 colors.

@next ChipSet

@endnode

@node CProb "Continuità Probabilistica"

@prev CProb

@{b}@{fg highlight}FlashMandelNG@{fg text}@{ub} uses the properties of @{"Mandelbrot's set" link Mandelbrot} known as @{b}Probabilistic Continuity@{ub} that is to say:

@{b}@{i}Given a rectangle on the complex plane containing @{"Mandelbrot's set" link Mandelbrot}, if all the points on the rectangle outline have the same escape speed, in that case is "very probable" that the inner area has the same escape speed too.@{ui}@{ub}

The program traces the borders of the rectangle to draw and later check them, if as result they have the same color, fills the whole area with this one, otherwise it divides the rectangle in two parts and starts again on the two drawn rectangles repeatedly, with a strategy called @{i}divide et impera@{ui}.
An explanation of the word @{i}probabilistic@{ui} is given if you let the program trace the complex plane area within the coordinates (-8,-8i) (8,8i), which it fills with a uniform color: it's not a program bug, it made only a probability error... you are warned!

@next CProb

@endnode
